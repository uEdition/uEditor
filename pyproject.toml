[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "uEditor"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = []
authors = [{ name = "Mark Hall", email = "mark.hall@work.room3b.eu" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "fastapi<1",
  "lxml>=5,<6",
  "pydantic[email]>=2,<3",
  "pydantic_settings>=2,<3",
  "pygit2>=1.17.0,<2",
  "python-multipart>=0.0.9,<1",
  "python-slugify>=8.0.4,<9",
  "PyYaml>=6,<7",
  "uedition>=1,<2",
  "uvicorn<1",
]

[project.urls]
Documentation = "https://github.com/unknown/ueditor#readme"
Issues = "https://github.com/unknown/ueditor/issues"
Source = "https://github.com/unknown/ueditor"

[tool.hatch.version]
path = "ueditor/__about__.py"

[tool.hatch.envs.default]
extra-dependencies = ["coverage[toml]>=6.5", "httpx", "pytest", "ruff==0.9.5"]

[tool.hatch.envs.default.scripts]
server = "uvicorn --reload --port 8000 ueditor:app {args}"
build-frontend = "cd ueditor/frontend && npm install && vite build --watch"
e2e-tests = "cd tests/e2e_tests && UEDITOR_BASE_PATH=./tmp_fixtures UEDITOR_TEST=true npx playwright test"
test = "UEDITOR_BASE_PATH=./tmp_fixtures UEDITOR_TEST=true pytest {args:tests}"
test-cov = "UEDITOR_BASE_PATH=./tmp_fixtures UEDITOR_TEST=true coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
style = ["ruff check --fix --exit-non-zero-on-fix {args:.}", "ruff format --check {args:.}"]

[tool.ruff]
target-version = "py37"
line-length = 120

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "D",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # Pydocstyle settings
  "D203",
  "D212",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["ueditor"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["ueditor"]
branch = true
parallel = true
omit = ["ueditor/__about__.py"]

[tool.coverage.paths]
ueditor = ["ueditor", "*/ueditor/ueditor"]
tests = ["tests", "*/ueditor/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
skip_covered = true
show_missing = true
